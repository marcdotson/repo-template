---
title: "Do You Even Quarto, Bruh?"
author: 
  - name: "Author 1"
    affiliation: "University of Whatever"
    email: "author1@example.edu"
  - name: "Author 2"
    affiliation: "University of Whatever"
    email: "author2@example.edu"
date: "November 26, 2022"
abstract: | 
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
keywords:
  - "Keyword 1"
  - "Keyword 2"
bibliography: references.bib
format: 
  jasa-pdf: 
    keep-tex: true
    cite-method: natbib
    journal:
      blinded: false
execute:
  echo: false
params:
  data_path: "../data/ad_data.rds"
  data_name: "Advertising Data"
knitr:
  opts_chunk:
    fig.path: "../figures/"
---

```{r}
#| label: setup
#| warning: false
#| message: false

# Load packages.
library(tidyverse)
library(tidymodels)

# Import data.
data <- readRDS(params$data_path)
```

## Introduction {#sec-intro}

We can can include regular single-paper citations using `[@citation]` like [@Allenby:1998] or multiple-paper citations using `[@citation; @citation]` like [@Allenby:1998; @Watanabe:2010], in-line citations using `@citation` like @Allenby:1998, or citations without the Author using `[-@citation]` like [-@Allenby:1998].

Additionally, each section and sub-section can be referenced by adding a `{#sec-label}` label to any heading and referencing `@sec-label`. For example, `## Introduction {#sec-intro}` would be referenced as `@sec-intro` like @sec-intro (note that the `seg-` prefix is required).

## Model Specification {#sec-model}

We can include math using LaTeX within the `$` or `$$` syntax. For example, `$y = \beta x + \epsilon$` produces $y = \beta x + \epsilon$ and
$$
Pr(y_{n,h}=p|\beta_n) = \frac{\exp{(x_{p,h}'\beta_n)}}{\sum_{p=1}^P\exp{(x_{p,h}'\beta_n)}}
$$ {#eq-mnl}

\noindent is produced using the `$$` syntax. The equation has to be labeled with `{#eq-label}` directly following the closing `$$` so it can be referenced with `@eq-label`. For example, the above equation `{#eq-mnl}` would be referenced as `@eq-mnl` like @eq-mnl (note that the `eq-` prefix is required).

## Empirical Application {#sec-data}

Using Quarto means we can use Markdown, R, and LaTeX (along with other languages) interchangeably. To illustrate, while we can create a table using LaTeX or Markdown, we can also just print a data frame using `knitr::kable()` and the `kableExtra` package. The name of the code block is the given label that can be referenced, for example `#| label: tbl-data` referenced with `@tbl-data` like @tbl-data (note that the `tbl-` prefix is required). For more table options, see the [kableExtra vignette](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf).

```{r}
#| label: tbl-data

knitr::kable(
  data[1:10,], 
  format = "latex", 
  align = "ll", 
  caption = "Included data.", 
  booktabs = TRUE
)
```

Similarly, we can include a figure using LaTeX, Markdown, or `knitr`. If `knitr::include_graphics()` is used, the name of the code block is the label that can be referenced, for example `#| label: fig-slug`. If Markdown `![]()` syntax is used, the same label would be `{#fig-slug}`. In either case, the figure would be referenced with `@fig-slug` like @fig-slug (note that the `fig-` prefix is required).

![A nice fig](../Figures/fig1.png){#fig-slug fig-align="center" fig-pos="H"}

## Results {#sec-results}

```{r}
click_prop <- data %>% 
  mutate(click_lvls = as.factor(click)) %>% 
  count(click_lvls) %>% 
  pivot_wider(names_from = click_lvls, values_from = n) %>% 
  mutate(click_prop = Yes/(No + Yes)) %>% 
  pull(click_prop)
```

Our tables and figures can be dynamic. In the YAML, we can include parameters under `params`. We've already imported data specified as a parameter, an `r params$data_name` example (the name itself being a parameter as well). We can use that data to produce dynamic results in tables or in-line, like `r round(click_prop * 100, 2)`% of click-through in the `r params$data_name`, and dynamic figures---all updated with whatever new data or other parameters we set. As before, the label of the code block can be referenced, like @fig-barplot.

```{r}
#| label: fig-barplot
#| fig-cap: "A bar plot."
#| fig-align: "center"
#| fig-pos: "H"

data %>% 
  ggplot(aes(x = design, fill = click)) +
  geom_bar()
```

## Conclusion {#sec-concl}

One final note. While the bibliography will be placed automatically at the end of the paper, we may have a few additional citations like R packages and other software to include that aren't explicitly cited elsewhere that we can include using the LaTeX syntax `\nocite{author:year, author:year}` (since we are using `natbib` for citations) as is demonstrated in the following bibliography.

\nocite{bayesm:2018, loo:2018}
